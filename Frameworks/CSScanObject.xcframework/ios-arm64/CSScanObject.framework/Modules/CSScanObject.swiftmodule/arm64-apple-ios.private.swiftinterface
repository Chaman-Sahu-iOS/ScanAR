// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios17.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name CSScanObject
import AVFoundation
import ArgumentParser
@_exported import CSScanObject
import Combine
import CoreGraphics
import CoreImage
import CoreLocation
import CoreMotion
import Dispatch
import Foundation
import Metal
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _RealityKit_SwiftUI
import _StringProcessing
import _SwiftConcurrencyShims
import os
@_Concurrency.MainActor(unsafe) public struct CaptureView : SwiftUI.View {
  @SwiftUI.ObservedObject @_projectedValueProperty($model) @_Concurrency.MainActor(unsafe) public var model: CSScanObject.CameraViewModel {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  @_Concurrency.MainActor(unsafe) public var $model: SwiftUI.ObservedObject<CSScanObject.CameraViewModel>.Wrapper {
    get
  }
  @_Concurrency.MainActor(unsafe) public init(model: CSScanObject.CameraViewModel)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s12CSScanObject11CaptureViewV4bodyQrvp", 0) __
}
public struct GenerateModel {
  public var inputFolder: Foundation.URL?
  public var outputFilename: Swift.String
  public var progressHandler: ((Swift.Double) -> Swift.Void)?
  public var estimatedTimeHandler: ((Foundation.TimeInterval) -> Swift.Void)?
  public var errorHandler: ((Swift.String, Swift.Int) -> Swift.Void)?
  public var completionHandler: (() -> Swift.Void)?
  public var modelDirctoryHandler: ((Swift.String) -> Swift.Void)?
  public init(inputFolder: Foundation.URL?)
  public mutating func run()
}
@_Concurrency.MainActor(unsafe) public struct CameraView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var scanningComepletionHandler: ((Swift.Bool) -> Swift.Void)?
  public typealias DoneButtonViewClosure = () -> SwiftUI.AnyView
  @_Concurrency.MainActor(unsafe) public var doneButtonView: CSScanObject.CameraView.DoneButtonViewClosure?
  @_Concurrency.MainActor(unsafe) public init(model: CSScanObject.CameraViewModel)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s12CSScanObject10CameraViewV4bodyQrvp", 0) __
}
@objc @_inheritsConvenienceInitializers public class CameraViewModel : ObjectiveC.NSObject, Combine.ObservableObject {
  public var session: AVFoundation.AVCaptureSession
  public enum CaptureMode {
    case manual
    case automatic(everySecs: Swift.Double)
  }
  @Combine.Published @_projectedValueProperty($captureMode) public var captureMode: CSScanObject.CameraViewModel.CaptureMode {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
  }
  public var $captureMode: Combine.Published<CSScanObject.CameraViewModel.CaptureMode>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public var captureDir: Foundation.URL? {
    get
  }
  public static var recommendedMinPhotos: Swift.Int
  public var defaultAutomaticCaptureIntervalSecs: Swift.Double
  @objc override dynamic public init()
  public func startSetup()
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
